---
interface Props {
  id: string;
  certificate: {
    id: string;
    src: string;
    description: string;
    platform: string;
    fecha: string;
    category: string;
    level: string;
    skills: string[];
    duration: string;
    credentialID: string;
  };
}

const { id, certificate } = Astro.props;

const getCategoryColor = (category: string) => {
  switch (category) {
    case 'cybersecurity':
      return 'bg-red-500/20 text-red-400 border-red-400/50';
    case 'development':
      return 'bg-cyan-500/20 text-cyan-400 border-cyan-400/50';
    case 'networking':
      return 'bg-green-500/20 text-green-400 border-green-400/50';
    default:
      return 'bg-purple-500/20 text-purple-400 border-purple-400/50';
  }
};

const getLevelIcon = (level: string) => {
  switch (level) {
    case 'beginner':
      return '▲';
    case 'intermediate':
      return '▲▲';
    case 'advanced':
      return '▲▲▲';
    default:
      return '▲';
  }
};

const getLevelColor = (level: string) => {
  switch (level) {
    case 'beginner':
      return 'text-green-400';
    case 'intermediate':
      return 'text-yellow-400';
    case 'advanced':
      return 'text-red-400';
    default:
      return 'text-gray-400';
  }
};
---

<dialog
  id={id}
  class="modal backdrop:bg-black/80 backdrop:backdrop-blur-sm bg-transparent p-4 max-w-6xl w-full max-h-[95vh] overflow-y-auto rounded-2xl border border-cyan-400/50 shadow-2xl shadow-cyan-500/20"
>
  <div class="relative bg-gradient-to-br from-slate-900/98 via-slate-800/95 to-slate-900/98 rounded-xl overflow-hidden border border-cyan-400/30 backdrop-blur-lg">
    
    {/* Cyber Circuit Background */}
    <div class="absolute inset-0 opacity-20 pointer-events-none">
      <div class="absolute inset-0 bg-[linear-gradient(0deg,transparent_24%,rgba(0,255,255,0.1)_25%,rgba(0,255,255,0.1)_26%,transparent_27%,transparent_74%,rgba(0,255,255,0.1)_75%,rgba(0,255,255,0.1)_76%,transparent_77%,transparent),linear-gradient(90deg,transparent_24%,rgba(0,255,255,0.1)_25%,rgba(0,255,255,0.1)_26%,transparent_27%,transparent_74%,rgba(0,255,255,0.1)_75%,rgba(0,255,255,0.1)_76%,transparent_77%,transparent)] bg-[size:20px_20px]"></div>
    </div>

    {/* Header */}
    <div class="relative p-6 border-b border-cyan-400/30">
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-4">
          <div class="flex items-center gap-2">
            <div class="w-3 h-3 rounded-full bg-red-500 animate-pulse"></div>
            <div class="w-3 h-3 rounded-full bg-yellow-500 animate-pulse" style="animation-delay: 0.5s"></div>
            <div class="w-3 h-3 rounded-full bg-green-500 animate-pulse" style="animation-delay: 1s"></div>
          </div>
          <h2 class="text-xl font-bold text-cyan-400 font-mono tracking-wide">
            [CERTIFICATE_ACCESS_GRANTED]
          </h2>
        </div>
        <button
          class="cyber-close-btn group relative bg-gradient-to-r from-red-500/20 to-pink-500/20 backdrop-blur-sm rounded-full p-2 text-red-400 hover:text-red-300 transition-all duration-300 border border-red-400/50 hover:border-red-400/80 hover:shadow-lg hover:shadow-red-500/30"
          onclick="window.closeModalWithAnimation(this.closest('dialog'))"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-6 h-6 transition-transform duration-300 group-hover:rotate-90"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>

    {/* Content */}
    <div class="relative p-6">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        
        {/* Certificate Image */}
        <div class="relative group">
          <div class="relative rounded-xl overflow-hidden border-2 border-cyan-400/30 hover:border-cyan-400/60 transition-all duration-500 cyber-glow-image">
            <img
              src={certificate.src}
              alt={`Certificado de ${certificate.description}`}
              class="w-full h-auto object-cover transition-transform duration-500 group-hover:scale-105"
            />
            <div class="absolute inset-0 bg-gradient-to-t from-slate-900/30 via-transparent to-transparent"></div>
            
            {/* Scan Line Effect */}
            <div class="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none">
              <div class="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-transparent via-cyan-400/80 to-transparent animate-scan-horizontal"></div>
            </div>
          </div>
        </div>

        {/* Certificate Details */}
        <div class="space-y-6">
          
          {/* Title */}
          <div class="space-y-2">
            <h3 class="text-2xl font-bold text-white font-mono tracking-wide">
              {certificate.description}
            </h3>
            <div class="flex items-center gap-3">
              <span class={`inline-flex items-center px-3 py-1 rounded-full text-sm font-bold border ${getCategoryColor(certificate.category)} font-mono uppercase tracking-wider shadow-lg`}>
                {certificate.platform}
              </span>
              <span class={`inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-gradient-to-r from-purple-500/20 to-pink-500/20 text-purple-400 border border-purple-400/50 font-mono uppercase`}>
                {certificate.category}
              </span>
            </div>
          </div>

          {/* Level & Status */}
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div class="space-y-2">
              <label class="text-sm font-mono text-cyan-400 uppercase tracking-widest">LEVEL</label>
              <div class="flex items-center gap-2">
                <span class={`text-lg font-bold font-mono ${getLevelColor(certificate.level)}`}>
                  {getLevelIcon(certificate.level)}
                </span>
                <span class={`text-sm font-bold font-mono uppercase ${getLevelColor(certificate.level)}`}>
                  {certificate.level}
                </span>
              </div>
            </div>
            <div class="space-y-2">
              <label class="text-sm font-mono text-cyan-400 uppercase tracking-widest">STATUS</label>
              <div class="flex items-center gap-2">
                <span class="inline-block w-3 h-3 bg-green-400 rounded-full animate-pulse"></span>
                <span class="text-sm font-bold font-mono text-green-400">VERIFIED</span>
              </div>
            </div>
          </div>

          {/* Metadata */}
          <div class="space-y-4">
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div class="space-y-2">
                <label class="text-sm font-mono text-cyan-400 uppercase tracking-widest">ISSUED</label>
                <div class="text-white font-mono">
                  <span class="text-cyan-400">[</span>
                  {certificate.fecha}
                  <span class="text-cyan-400">]</span>
                </div>
              </div>
              <div class="space-y-2">
                <label class="text-sm font-mono text-cyan-400 uppercase tracking-widest">DURATION</label>
                <div class="text-purple-400 font-mono font-bold">
                  {certificate.duration}
                </div>
              </div>
            </div>
            
            <div class="space-y-2">
              <label class="text-sm font-mono text-cyan-400 uppercase tracking-widest">CREDENTIAL ID</label>
              <div class="bg-slate-800/50 backdrop-blur-sm rounded-lg p-3 border border-cyan-400/30">
                <code class="text-sm font-mono text-cyan-300 break-all">
                  {certificate.credentialID}
                </code>
              </div>
            </div>
          </div>

          {/* Skills */}
          <div class="space-y-3">
            <label class="text-sm font-mono text-cyan-400 uppercase tracking-widest">SKILLS ACQUIRED</label>
            <div class="flex flex-wrap gap-2">
              {certificate.skills.map((skill) => (
                <span 
                  class="px-3 py-2 bg-gradient-to-r from-slate-700/80 to-slate-600/80 text-cyan-300 text-sm rounded-lg border border-cyan-400/30 font-mono hover:border-cyan-400/60 transition-all duration-300 hover:shadow-lg hover:shadow-cyan-500/20"
                >
                  {skill}
                </span>
              ))}
            </div>
          </div>

          {/* Actions */}
          <div class="flex flex-col sm:flex-row gap-3 pt-4">
            <button 
              class="cyber-button flex-1 bg-gradient-to-r from-cyan-500/20 to-blue-500/20 text-cyan-400 border-cyan-400/50 hover:from-cyan-500/30 hover:to-blue-500/30 hover:border-cyan-400/80"
              onclick="window.startVerificationProcess()"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
              </svg>
              <span class="font-mono">VERIFY ONLINE</span>
            </button>
            <button 
              class="cyber-button flex-1 bg-gradient-to-r from-purple-500/20 to-pink-500/20 text-purple-400 border-purple-400/50 hover:from-purple-500/30 hover:to-pink-500/30 hover:border-purple-400/80"
              onclick="window.print()"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
              </svg>
              <span class="font-mono">DOWNLOAD</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    {/* Footer */}
    <div class="relative p-6 border-t border-cyan-400/30">
      <div class="flex items-center justify-between flex-wrap gap-4">
        <div class="flex items-center gap-2 text-sm text-gray-400">
          <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
          <span class="font-mono">SECURE_CONNECTION_ESTABLISHED</span>
        </div>
        <div class="text-sm text-gray-400 font-mono">
          <span class="text-cyan-400">[</span>
          AUTHENTICATED
          <span class="text-cyan-400">]</span>
        </div>
      </div>
    </div>

    {/* Corner Decorations */}
    <div class="absolute top-0 left-0 w-8 h-8 border-t-2 border-l-2 border-cyan-400/50"></div>
    <div class="absolute top-0 right-0 w-8 h-8 border-t-2 border-r-2 border-cyan-400/50"></div>
    <div class="absolute bottom-0 left-0 w-8 h-8 border-b-2 border-l-2 border-cyan-400/50"></div>
    <div class="absolute bottom-0 right-0 w-8 h-8 border-b-2 border-r-2 border-cyan-400/50"></div>
  </div>
</dialog>



<script>


  // Inicializar modales después de que se abra uno
  function initializeModal(modalId: string) {
    const modal = document.getElementById(modalId) as HTMLDialogElement;
    if (!modal) return;
    
    console.log('Inicializando modal:', modalId);
    
    // Manejar clic en el botón de cerrar
    const closeButton = modal.querySelector('.cyber-close-btn');
    closeButton?.addEventListener('click', (e) => {
      e.preventDefault();
      (window as any).closeModalWithAnimation(modal);
    });

    // Manejar clic fuera del modal
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        (window as any).closeModalWithAnimation(modal);
      }
    });

    // Manejar tecla ESC
    modal.addEventListener('cancel', (e) => {
      e.preventDefault();
      (window as any).closeModalWithAnimation(modal);
    });

    // Prevenir scroll cuando el modal está abierto
    modal.addEventListener('close', () => {
      document.documentElement.style.overflow = '';
    });
    
    modal.addEventListener('show', () => {
      document.documentElement.style.overflow = 'hidden';
    });
  }

  // Función global para abrir modal (disponible para otros scripts)
  (window as any).openCertificateModal = function(modalId: string) {
    console.log('Abriendo modal de certificado:', modalId);
    const modal = document.getElementById(modalId) as HTMLDialogElement;
    if (modal) {
      // Inicializar el modal si no se ha hecho
      initializeModal(modalId);
      modal.showModal();
    } else {
      console.error('Modal no encontrado:', modalId);
    }
  };

  // Manejar eventos globales
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Modal script cargado');
    
    // Inicializar todos los modales existentes
    const modals = document.querySelectorAll('dialog');
    modals.forEach(modal => {
      if (modal.id) {
        initializeModal(modal.id);
      }
    });


  });
</script>

<style>
  .modal {
    animation: modal-appear 0.3s ease-out;
  }

  .modal.closing {
    animation: modal-disappear 0.3s ease-in;
  }

  @keyframes modal-appear {
    from {
      opacity: 0;
      transform: scale(0.9) translateY(-20px);
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  @keyframes modal-disappear {
    from {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
    to {
      opacity: 0;
      transform: scale(0.9) translateY(-20px);
    }
  }

  .cyber-glow-image {
    box-shadow: 
      0 0 20px rgba(0, 255, 255, 0.2),
      inset 0 0 20px rgba(0, 255, 255, 0.1);
  }

  .cyber-glow-image:hover {
    box-shadow: 
      0 0 30px rgba(0, 255, 255, 0.4),
      0 0 60px rgba(0, 255, 255, 0.2),
      inset 0 0 30px rgba(0, 255, 255, 0.15);
  }

  .cyber-button {
    @apply px-6 py-3 rounded-lg font-bold text-sm border transition-all duration-300 flex items-center justify-center backdrop-blur-sm;
  }

  .cyber-button:hover {
    @apply shadow-lg transform translate-y-[-2px];
  }

  .cyber-glow-bar {
    box-shadow: 
      0 0 10px currentColor,
      inset 0 0 10px rgba(255, 255, 255, 0.1);
  }

  .cyber-terminal {
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.95), rgba(15, 23, 42, 0.9));
    backdrop-filter: blur(20px);
  }

  .matrix-bg {
    background: 
      linear-gradient(90deg, transparent 0%, rgba(0, 255, 255, 0.03) 50%, transparent 100%),
      linear-gradient(0deg, transparent 0%, rgba(0, 255, 255, 0.03) 50%, transparent 100%);
    background-size: 50px 50px;
    animation: matrix-move 20s linear infinite;
  }

  @keyframes matrix-move {
    0% { background-position: 0 0; }
    100% { background-position: 50px 50px; }
  }

  @keyframes fade-in {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .animate-fade-in {
    animation: fade-in 0.5s ease-out;
  }

  @keyframes scan-horizontal {
    0% { transform: translateX(-100%); opacity: 0; }
    50% { opacity: 1; }
    100% { transform: translateX(100%); opacity: 0; }
  }

  .animate-scan-horizontal {
    animation: scan-horizontal 2s ease-in-out infinite;
  }

  dialog::backdrop {
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(8px);
    transition: all 0.3s ease;
  }

  dialog.closing::backdrop {
    opacity: 0;
    backdrop-filter: blur(0);
  }

  /* Verification Overlay Styles */
  #verificationOverlay {
    animation: overlay-appear 0.5s ease-out;
  }

  @keyframes overlay-appear {
    from {
      opacity: 0;
      backdrop-filter: blur(0);
    }
    to {
      opacity: 1;
      backdrop-filter: blur(8px);
    }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .modal {
      max-width: 95vw;
      max-height: 95vh;
    }
    
    .grid-cols-1.lg\\:grid-cols-2 {
      grid-template-columns: 1fr;
    }
    
    .grid-cols-1.sm\\:grid-cols-2 {
      grid-template-columns: 1fr;
    }
    
    .flex-col.sm\\:flex-row {
      flex-direction: column;
    }

    .cyber-terminal {
      max-width: 95vw;
      margin: 1rem;
    }
  }

  @media (max-width: 480px) {
    .modal {
      margin: 1rem;
      max-width: calc(100vw - 2rem);
    }
    
    .p-6 {
      padding: 1rem;
    }
    
    .text-2xl {
      font-size: 1.5rem;
    }
    
    .text-xl {
      font-size: 1.25rem;
    }

    .text-4xl {
      font-size: 2rem;
    }
  }
</style> 